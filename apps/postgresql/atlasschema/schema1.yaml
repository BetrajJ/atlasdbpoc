apiVersion: db.atlasgo.io/v1alpha1
kind: AtlasSchema
metadata:
  name: skyhigh-sample-schema
  namespace: database
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  urlFrom:
    secretKeyRef:
      name: postgres-credentials
      key: dev-url
  # Define policies to handle existing database safely
  policy:
    diff:
      skip:
        drop_table: true    # Don't drop existing tables
        drop_column: false   # Don't drop existing columns
    lint:
      destructive:
        error: true        # Allow non-destructive changes
  schema:
    sql: |
      -- Sample schema - testing
      CREATE TABLE IF NOT EXISTS sample_users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        Gender VARCHAR(255),
        age VARCHAR(20),
        phone VARCHAR(20),
        address VARCHAR(255) NOT NULL,
        status VARCHAR(50) DEFAULT 'active',
        books VARCHAR(100),
        issued date VARCHAR(50),
        last_login TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );

      CREATE INDEX IF NOT EXISTS idx_sample_users_email ON sample_users(email);
      CREATE INDEX IF NOT EXISTS idx_sample_users_status ON sample_users(status);
      CREATE INDEX IF NOT EXISTS idx_sample_users_last_login ON sample_users(last_login);

      -- Create roles
      DO $$
      BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'sample_readonly') THEN
            CREATE ROLE sample_readonly LOGIN PASSWORD 'readonly_password';
        END IF;
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'sample_readwrite') THEN
            CREATE ROLE sample_readwrite LOGIN PASSWORD 'readwrite_password';
        END IF;
      END
      $$;

      -- Grant privileges
      GRANT CONNECT ON DATABASE postgres TO sample_readonly, sample_readwrite;
      GRANT USAGE ON SCHEMA public TO sample_readonly, sample_readwrite;
      GRANT SELECT ON sample_users TO sample_readonly;
      GRANT SELECT, INSERT, UPDATE, DELETE ON sample_users TO sample_readwrite;
