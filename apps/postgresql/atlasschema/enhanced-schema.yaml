apiVersion: db.atlasgo.io/v1alpha1
kind: AtlasSchema
metadata:
  name: skyhigh-enhanced-schema
  namespace: database
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  urlFrom:
    secretKeyRef:
      name: postgres-credentials
      key: dev-url
  
  policy:
    diff:
      skip:
        drop_table: true    # Don't drop tables
        drop_column: false  # Allow column drops
    lint:
      destructive:
        error: true        # Block destructive changes
        
  schema:
    sql: |
      -- Enhanced schema for POC
      CREATE TABLE IF NOT EXISTS demotable (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        gender VARCHAR(50),
        age INTEGER CHECK (age >= 0 AND age <= 150),
        phone VARCHAR(20),
        telephone VARCHAR(20),
        address VARCHAR(255) NOT NULL,
        status VARCHAR(50) DEFAULT 'active',
        last_login TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );

      -- Add some useful indexes
      CREATE INDEX IF NOT EXISTS idx_demotable_email ON sample_users(email);
      CREATE INDEX IF NOT EXISTS idx_demotable_status ON sample_users(status);
      CREATE INDEX IF NOT EXISTS idx_demotable_last_login ON sample_users(last_login);

      -- Simple preferences table (new addition)
      CREATE TABLE IF NOT EXISTS user_preferences (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES demotable(id) ON DELETE CASCADE,
        preference_key VARCHAR(100) NOT NULL,
        preference_value TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        UNIQUE(user_id, preference_key)
      );

      CREATE INDEX IF NOT EXISTS idx_user_preferences_user_id ON user_preferences(user_id);

      -- Simple function to update timestamp
      CREATE OR REPLACE FUNCTION update_updated_at()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = NOW();
          RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;

      -- Trigger for auto-updating updated_at
      DROP TRIGGER IF EXISTS update_users_timestamp ON demotable;
      CREATE TRIGGER update_users_timestamp
          BEFORE UPDATE ON demotable
          FOR EACH ROW
          EXECUTE FUNCTION update_updated_at();
